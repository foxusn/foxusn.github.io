[{"content":" UTF-8 是一种被广泛使用的编码格式，是文本文件的标准编码，其中包括 XML 和 JSON 在内也都使用该编码。 Go 语言的字符有以下两种，一种是 uint8 类型，或者叫 byte 型，代表了 ASCII 码的一个字符。另一种是 rune 类型，代表一个 UTF-8 字符，当需要处理中文、日文或者其他复合字符时，则需要用到 rune 类型，rune 类型等价于 int32 类型。 Go 中的字符串与 Python、Java 和 JavaScript 中的字符串一样，都是不可变的，可以独立访问字符串中的每个字符，但是不能修改它们。 字符串使用 UTF-8 可变长度编码，每个字符占用 1~4 字节内存空间。 字符串中的字符数量不等于其字节数。比如，一个包含 5 个汉字的 Go 字符串，其长度是 5 个字符，但它占用的内存空间可能是 15 个字节（每个汉字通常占用 3 字节）。 关键字 range 可以将 UTF-8 编码的字符串解码为 rune Go 语言把双引号包围的字面值推断为 string 类型，以下三行的作用等同：\npeace := \u0026#34;peace\u0026#34; var peace = \u0026#34;peace\u0026#34; var peace string = \u0026#34;peace\u0026#34; 字符串字面值（String Literals）支持转义字符\nfmt.Println(\u0026#34;peace be upon you\\\\nupon you be peace\u0026#34;) 原始字符串字面值（Raw String Literals）不支持转义字符\nfmt.Println(`strings can span mutiple lines with the \\\\n escape sequence`) // Multi-line raw string literals fmt.Println(` peace be upon you upon you be peace`) 字符串字面值和原始字符串字面值都是字符串，%[1]T 表示第一个参数的类型\nfmt.Printf(\u0026#34;%v is a %[1]T\\n\u0026#34;, \u0026#34;literal string\u0026#34;) fmt.Printf(\u0026#34;%v is a %[1]T\\n\u0026#34;, `raw literal string`) Go 语言提供了 rune 类型用于表示但个 Unicode 码点（code point），该类型是 int32 类型的别名，byte 是 uint8 类型的别名，也可以自定义类型别名：\ntype rune = uint8 type byte = int32 如果想打印字符而不是数值，可以使用格式化动词 %c\nvar pi rune = 960 var alpha rune = 940 var omega rune = 969 var bang byte = 33 fmt.Printf(\u0026#34;%v %v %v %v\\\\n\u0026#34;, pi, alpha, omega, bang) // 打印码点：960 940 969 33 fmt.Printf(\u0026#34;%c %c %c %c\\\\n\u0026#34;, pi, alpha, omega, bang) // 打印字符：π ά ω ! 字符字面值使用单引号括起来；如果没有指定字符类型，自动推断类型为 rune\nvar grade rune grade = \u0026#39;A\u0026#39; var grade1 = \u0026#39;A\u0026#39; var grade2 rune = \u0026#39;A\u0026#39; fmt.Printf(\u0026#34;%T %T %T\\\\n\u0026#34;, grade, grade1, grade2) // int32 int32 int32 fmt.Println(grade, grade1, grade2) // 65 65 65 ","date":"2025-08-19T13:25:58+08:00","permalink":"https://foxusn.github.io/go-multilingual/","title":"Go语言字符、字符串、码点"},{"content":" 关系型数据库（Relational Databse） MySQL(DBMS): 服务器（Server）、数据库（Schema）、表（Table），服务器可以有多个数据库、数据库可以有多个表。 CRUD 操作：Create, Read, Update, Delete 练习：SQL Online、SQLBolt 创建 创建、使用数据库\nCREATE DATABASE db-name; USE db-name; 创建表、添加列\nCREATE TABLE tb-name( id INT AUTO_INCREMENT PRIMARY KEY, egg_name VARCHAR(10) NOT NULL, sold DATE NULL ); 更新 插入（新增）一条数据\nINSERT INTO db-name.tb-name(id, egg_name, sold) VALUES(1, \u0026#39;kiki\u0026#39; , \u0026#39;2020-01-05\u0026#39;); 可以省略列名\nINSERT INTO db-name.tb-name VALUES(2, \u0026#39;lili\u0026#39; , \u0026#39;2020-01-08\u0026#39;); 主键自增\nINSERT INTO db-name.tb-name VALUES(DEFAULT, \u0026#39;didi\u0026#39; , NULL); 插入列\nALTER TABLE db-name.tbname ADD weight FLOAT NOT NULL; 修改数据\nUPDATE db-name.tb-name SET sold = \u0026#39;2021-11-10\u0026#39; WHERE id = 2; 删除 删除某条数据\nDELETE FROM db.tb WHERE id = 1; 删除表/数据库\nDROP TABLE db.tb; DROP DATABASE db; 查找 基本操作\nSELECT * FROM db.tb; SELECT COL1, COL2 FROM db.tb; SELECT * FROM movies WHERE id = 6; SELECT id, title FROM movies WHERE id = 6; 查找范围\nSELECT id, title, year FROM movies WHERE year BETWEEN 2000 AND 2010 SELECT id, title, year FROM movies WHERE year NOT BETWEEN 2000 AND 2010 查找含有某个字符串的数据\nSELECT id, title FROM movies WHERE title LIKE \u0026#34;%Story%\u0026#34;; -- 选择 title 中带有 Story 字符串的数据 根据字符串查找\nSELECT id, title, director FROM movies WHERE director = \u0026#34;John Lasseter\u0026#34;; 查找除字符串外的其他数据\nSELECT id, title, director FROM movies WHERE director != \u0026#34;John Lasseter\u0026#34;; \u0026quot;WALL-_\u0026quot; 精确匹配“WALL-”后跟一个字符。\u0026quot;%WALL-%\u0026quot; 模糊匹配，只要标题中有“WALL-”就行，不管前后还有多少字符。\nSELECT * FROM movies WHERE title LIKE \u0026#34;WALL-_\u0026#34;; SELECT * FROM movies WHERE title LIKE \u0026#34;%WALL-%\u0026#34;; 补充\nORDER BY, ASC/DESC\n","date":"2025-08-18T15:09:52+08:00","permalink":"https://foxusn.github.io/sql-note/","title":"SQL 的基本操作"},{"content":"虚拟化 检查虚拟化支持情况：\nlscpu | grep -i virtualization egrep -c \u0026#39;(vmx|svm)\u0026#39; /proc/cpuinfo qemu-system-x86_64 --version virsh --version 检查 KVM 模块是否加载：\nlsmod | grep kvm 安装 安装软件包组 @virtulization：\ndnf group info virtualization sudo dnf install @virtulization 如果需要可选组件：\nsudo dnf group install --with-optional virtualization 服务 启用 libvertd 服务\nsudo systemctl enable --now libvirtd 虚拟机 通过命令安装 查看支持的系统：\nosinfo-query os | grep archlinux 创建虚拟硬盘（可选）：\nsudo qemu-img create -f qcow2 /var/lib/libvirt/images/arch-xxx.qcow2 20480 安装：\nsudo virt-install \\ --name archlinux \\ --description \u0026#34;Arch Linux\u0026#34; \\ --ram 4096 \\ --vcpus 2 \\ --cpu host \\ --virt-type kvm \\ --disk path=/home/$USER/VMs/arch-xxx.qcow2,size=20,bus=virtio \\ --cdrom ~/Downloads/archlinux-xxx.iso \\ --network network=default,model=virtio \\ --os-variant generic \\ --graphics spice,listen=127.0.0.1 \\ --noautoconsole 使用图形界面安装 运行 virt-manager，未完待续。。。\n管理 查看、开启、关闭虚拟机\nsudo virsh list sudo virsh start archlinux sudo virsh shutdown archlinux 创建快照。。。未完待续。。。\n","date":"2025-07-26T23:13:38+08:00","permalink":"https://foxusn.github.io/qemu-kvm/","title":"QEMU/KVM 虚拟机安装"},{"content":"GitHub 项目：dockur/windows，Windows 镜像：massgrave\n配置文件 docker-compose.yaml：\nservices: windows: image: dockurr/windows container_name: lts11 environment: DISK_SIZE: \u0026#34;128G\u0026#34; RAM_SIZE: \u0026#34;2G\u0026#34; CPU_CORES: \u0026#34;4\u0026#34; USERNAME: \u0026#34;USERNAME\u0026#34; PASSWORD: \u0026#34;PSW\u0026#34; LANGUAGE: \u0026#34;English\u0026#34; REGION: \u0026#34;en-US\u0026#34; KEYBOARD: \u0026#34;en-US\u0026#34; devices: - /dev/kvm - /dev/net/tun cap_add: - NET_ADMIN ports: - 8006:8006 - 3389:3389/tcp - 3389:3389/udp volumes: - ./lts11:/storage - ./shared:/data - ./lts11.iso:/boot.iso restart: always stop_grace_period: 2m 目录结构：\n~ % tree dkr-compose dkr-compose └── win11-ltsc ├── docker-compose.yaml ├── lts11 │ ├── data.img │ ├── windows.base │ ├── windows.boot │ ├── windows.mac │ ├── windows.rom │ ├── windows.vars │ └── windows.ver ├── lts11.iso └── shared ├── demo.md └── readme.txt 4 directories, 11 files 运行容器：\nsudo docker compose up -d 安装 freerdp：\nsudo dnf install freerdp 连接：\nxfreerdp /v:localhost /u:USERNAME /p:PSW /dynamic-resolution /scale-desktop:200 +clipboard /sound:sys:alsa ","date":"2025-07-26T04:37:33+08:00","permalink":"https://foxusn.github.io/docker-win/","title":"Docker 容器运行 Windows"},{"content":"字体 设置控制台字体为：Terminus font, 132(column), bold\nshowconsolefont stty size setfont ter-132b 网络 查看网络情况、连接网络\nip link ip a ping -c 3 bilibili.com iwctl device list iwctl --passphrase \u0026lt;password\u0026gt; station wlan0 connect \u0026lt;wifiname\u0026gt; 时区 \u0026amp; 时间 设置时区和时间\ntimedatectl set-ntp true timedatectl set-timezone Asia/Shanghai 分区 查看分区情况、分区\nlsblk -p fdisk -l cfdisk /dev/nvme0n1 xxx 文件系统 格式化文件系统\nmkfs.fat -F 32 /dev/efi_system_partition mkfs.btrfs /dev/root_partition Btrfs 子卷 创建 Btrfs 子卷\nmount -t btrfs -o compress=zstd /dev/root_partition /mnt btrfs subvolume create /mnt/@ btrfs subvolume create /mnt/@home btrfs subvolume create /mnt/@swap btrfs subvolume list -p /mnt umount /mnt 挂载 挂载分区\nmount -t btrfs -o subvol=/@,compress=zstd /dev/root_partition /mnt #根目录 mount --mkdir -t btrfs -o subvol=/@home,compress=zstd /dev/root_partition /mnt/home #/home目录 mount --mkdir -t btrfs -o subvol=/@swap,compress=zstd /dev/root_partition /mnt/swap #/swap目录 mount --mkdir /dev/efi_partition /mnt/boot #/boot目录 mount --mkdir /dev/winefi_partition /mnt/winboot # windows的启动分区，为双系统引导做准备 df -h 安装 开始安装\nvim /etc/pacman.d/mirrorlist pacman -Sy archlinux-keyring pacstrap -K /mnt base base-devel linux linux-firmware linux-headers btrfs-progs # -K 复制密钥 # base-devel 是编译其他软件的时候用的 # linux 是内核，可以更换 # linux-firmware 是固件 # btrfs-progs 是 btrfs 文件系统的管理工具 pacstrap /mnt networkmanager vim neovim sudo amd-ucode bash-completion 未完待续。。。 ","date":"2025-07-24T22:26:48+08:00","permalink":"https://foxusn.github.io/arch-install/","title":"Arch Linux 安装（困难模式）"},{"content":"安装 安装 golang 包、查看版本\nsudo dnf install golang go version 项目 创建项目文件夹、初始化\nmkdir -p ~/Golang/myapp \u0026amp;\u0026amp; cd ~/Golang/myapp go mod init myapp.local 示例 一段示例代码\npackage main import \u0026#34;fmt\u0026#34; func main() { whatToSay := \u0026#34;hello world\u0026#34; saySomething(whatToSay) } func saySomething(whatToSay string) { fmt.Println(whatToSay) } 运行 编译、运行\ngo run hello.go # --- OR --- go build hello.go ./hello ","date":"2025-07-24T21:55:04+08:00","permalink":"https://foxusn.github.io/go-quick/","title":"Go Quick Note"},{"content":"安装 安装 Fcitx5 主程序和中文包：\nsudo dnf fcitx5 fcitx5-chinese-addons 开机启动 设置 Fcitx5 随系统启动，然后重启\ncp /usr/share/applications/org.fcitx.Fcitx5.desktop ~/.config/autostart/ 输入方案 打开 Fcitx 5 Configuration，搜索输入方案（如：shuangpin），点击 Add 添加\nGnome 扩展 安装 Gnome 扩展 Input Method Panel 以设置候选字的字体和大小 🔚\n","date":"2025-07-22T21:44:58+08:00","permalink":"https://foxusn.github.io/fcitx5/","title":"Fedora 安装中文输入法"},{"content":"安装 sudo dnf install samba samba-client 共享文件夹 创建文件夹、赋权\nmkdir -p ~/Shared chmod 777 ~/Shared 追加内容到 /etc/samba/smb.conf\nsudo bash -c \u0026#39;cat \u0026gt;\u0026gt; /etc/samba/smb.conf \u0026lt;\u0026lt;EOF [Shared] path = /home/YOUR_USERNAME/Shared writable = yes browseable = yes guest ok = no create mask = 0666 directory mask = 0777 force user = YOUR_USERNAME EOF\u0026#39; Samba 用户 需确保这个用户在系统中存在\nsudo smbpasswd -a YOUR_USERNAME 防火墙 配置防火墙放行 Samba 服务\nsudo firewall-cmd --permanent --add-service=samba sudo firewall-cmd --reload sudo firewall-cmd --list-all SELinux 配置 SELinux 支持 Samba 访问 home 目录\nsudo setsebool -P samba_enable_home_dirs on sudo chcon -t samba_share_t ~/Shared -R 开机启动 立即启动、开机自启动\nsudo systemctl enable --now smb nmb sudo systemctl status smb nmb 连接 smb://192.168.XXX.XXX/Shared ","date":"2025-04-17T02:47:51+08:00","permalink":"https://foxusn.github.io/samba-fedora/","title":"Fedora 安装 Samba"},{"content":"网络 扫描、连接 Wi-Fi：\nnmcli dev wifi list nmcli dev wifi rescan nmcli device wifi connect \u0026#34;SSID\u0026#34; password \u0026#34;PSW\u0026#34; nmcli connection show --active 主机名 查看、修改主机名\nhostnamectl sudo hostnamectl set-hostname \u0026lt;new-hostname\u0026gt; 包管理 追加 defaultyes=True 到 /etc/dnf/dnf.conf：\necho \u0026#34;defaultyes=True\u0026#34; | sudo tee -a /etc/dnf/dnf.conf 更新软件包：\ndnf check-update sudo dnf upgrade 按需安装：\nsudo dnf install bat fastfetch fcitx5 fcitx5-chinese-addons freerdp golang libavcodec-freeworld mpv neovim samba samba-client tealdeer 常用 dnf 命令：\ndnf search \u0026lt;pkg-name\u0026gt; dnf info \u0026lt;pkg-name\u0026gt; sudo dnf install \u0026lt;pkg-name\u0026gt; sudo dnf remove \u0026lt;pkg-name\u0026gt; dnf list --installed | grep -i \u0026lt;pkg-name\u0026gt; dnf autoremove dnf install --assumeno \u0026lt;pkg-name\u0026gt; dnf history list dnf history info \u0026lt;ID\u0026gt; | grep -i \u0026lt;pkg-name\u0026gt; 引导 追加 GRUB_SAVEDEFAULT=true 到 /etc/default/grub：\necho \u0026#39;GRUB_SAVEDEFAULT=true\u0026#39; | sudo tee -a /etc/default/grub 重新生成 GRUB2 引导配置文件并将生成的配置写入到 /boot/grub2/grub.cfg：\nsudo grub2-mkconfig -o /boot/grub2/grub.cfg 别名 创建 ~/.myaliases 文件，按需添加别名：\n# ~/.myaliases alias ..=\u0026#39;cd ..\u0026#39; alias ...=\u0026#39;cd ../..\u0026#39; alias ....=\u0026#39;cd ../../..\u0026#39; alias l=\u0026#39;ls -CF\u0026#39; alias la=\u0026#39;ls -A\u0026#39; alias c=\u0026#39;clear\u0026#39; alias h=\u0026#39;history\u0026#39; alias v=\u0026#39;nvim\u0026#39; alias fk=\u0026#39;sudo $(fc -ln -1)\u0026#39; alias hg=\u0026#39;history | grep\u0026#39; alias vin=\u0026#39;nvim --noplugin\u0026#39; alias catbrc=\u0026#39;cat ~/.bashrc\u0026#39; alias sobrc=\u0026#39;source ~/.bashrc\u0026#39; alias vibrc=\u0026#39;nvim ~/.bashrc\u0026#39; alias extar=\u0026#39;tar -xzvf\u0026#39; alias sdupg=\u0026#39;sudo dnf upgrade\u0026#39; alias trash=\u0026#39;mv -t ~/.local/share/Trash/files\u0026#39; # Logout, Reboot, Suspend, Poweroff alias lgout=\u0026#39;gnome-session-quit --logout --no-prompt\u0026#39; alias reboot=\u0026#39;systemctl reboot\u0026#39; alias ssp=\u0026#39;systemctl suspend\u0026#39; alias pwoff=\u0026#39;systemctl poweroff\u0026#39; # Git alias gst=\u0026#39;git status\u0026#39; alias gad=\u0026#39;git add .\u0026#39; alias gcm=\u0026#39;git commit -m\u0026#39; alias gpush=\u0026#39;git push\u0026#39; function gacp() { git add -A git commit -m \u0026#34;$1\u0026#34; git push } # mpv vv() { nohup mpv --really-quiet \u0026#34;$@\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp; } # xfreerdp alias rdpwin=\u0026#39;nohup xfreerdp /v:localhost /u:USERNAME /p:PSW /dynamic-r esolution /scale-desktop:210 +clipboard /sound:sys:alsa \u0026gt; ~/.xfreerd p.log 2\u0026gt;\u0026amp;1 \u0026amp;\u0026#39; Bash 追加内容到 ~/.bashrc：\ncat \u0026gt;\u0026gt; ~/.bashrc \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; bind \u0026#34;set completion-ignore-case on\u0026#34; export HISTCONTROL=erasedups export HISTIGNORE=\u0026#34;\u0026amp;:h:l:l.:la:ll:ls:cd:pwd:c:v:..:...:....\u0026#34; # Aliases if [ -f ~/.myaliases ]; then source ~/.myaliases fi EOF 应用修改：\nsource ~/.bashrc Flatpak 常用 flatpak 命令：\nflatpak install flathub \u0026lt;pkg-id\u0026gt; flatpak search \u0026lt;keyword\u0026gt; flatpak list --app flatpak uninstall \u0026lt;pkg-id\u0026gt; flatpak remote-ls --updates flatpak update \u0026lt;pkg-id\u0026gt; RPM Fusion 启用 RPM Fusion：\nsudo dnf install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm Office 不需要 LibreOffice 可以卸载：\nsudo dnf remove libreoffice* ","date":"2025-04-10T10:15:59+08:00","permalink":"https://foxusn.github.io/fedora-config/","title":"Fedora Linux 开荒"},{"content":"密钥对 生成两个ed25519类型的密钥对\nssh-keygen -t ed25519 -f ~/.ssh/github_ssh -C \u0026#34;\u0026#34; -N \u0026#34;\u0026#34; ssh-keygen -t ed25519 -f ~/.ssh/hugo_deploy -C \u0026#34;\u0026#34; -N \u0026#34;\u0026#34; ssh-add -D ssh -T git@github.com 远程仓库 创建两个 GitHub 仓库：Public、Private 各一个。(优化中\u0026hellip;)\n工作流 参考 peaceiris/actions-hugo，添加下面的内容到 ~/Blog/hugo-blog/.github/workfows/hugo.yaml 文件， 注意替换用户名和 secret 的变量名\nname: Deploy to Public Repo on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Set timezone run: | sudo timedatectl set-timezone Asia/Shanghai # Checkout - name: Checkout private repo uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 # SSH - name: Setup SSH uses: webfactory/ssh-agent@v0.9.1 with: ssh-private-key: ${{ secrets.HUGO_FOXUSN_DEPLOY }} # Install Hugo - name: Set up Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: \u0026#34;true\u0026#34; # Build the Hugo site - name: Build Hugo site run: hugo --minify # Deploy to the public repo via SSH - name: Deploy to public repository run: | rm -rf deploy-repo git clone --single-branch --branch main git@github.com:username/username.github.io.git deploy-repo cd deploy-repo rm -rf * cp -r ../public/* . git config user.email \u0026#34;username@example.com\u0026#34; git config user.name \u0026#34;JohnDoe\u0026#34; git add . if git diff --cached --quiet; then echo \u0026#34;No changes to commit\u0026#34; else git commit -m \u0026#34;Auto deploy Hugo site $(date \u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39;)\u0026#34; git push origin main fi 推送 添加、提交、关联远程仓库、推送\ngit add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin git@github.com:username/hugo-blog.git git push -u origin main 排障 到 Private 仓库查看 Actions 的情况，根据报错内容查找资料、解决问题\n","date":"2025-04-06T16:15:10+08:00","permalink":"https://foxusn.github.io/hugo-deploy/","title":"Hugo 博客部署（创作中）"},{"content":"安装 在 GitHub下载最新的hugo_extended_0.xxx.x_linux-amd64.tar.gz，然后解压：\ntar -xzvf hugo_extended_0.xxx.x_linux-amd64.tar.gz 移动解压得到的hugo文件到 /usr/local/bin\nsudo mv ./hugo /usr/local/bin 查看版本、验证安装\nhugo version 本地站点 新建文件夹、添加一个本地博客站点\nmkdir ~/Blog \u0026amp;\u0026amp; cd ~/Blog hugo new site hugo-blog cd ./hugo-blog 初始化本地仓库\ngit init touch .gitignore 主题 添加一个主题，这里使用hugo-theme-stack这个主题\ngit submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/stack 新建博文\nhugo new content content/post/first-blog.md ","date":"2025-04-06T15:51:14+08:00","permalink":"https://foxusn.github.io/hugo-blog/","title":"Hugo 博客搭建"},{"content":"安装 dnf list installed openssh which ssh # 输出 /usr/sbin/ssh systemctl status sshd 密钥对 ssh-keygen -t ed25519 -C \u0026#34;your_email@example.com\u0026#34; -f ~/.ssh/github_ed25519 -N \u0026#34;\u0026#34; # ~/.ssh 如果不存在会自动创建；-N 参数设置 passphrase 为空 SSH Agent eval \u0026#34;$(ssh-agent -s)\u0026#34; # 启动 SSH Agent（后台进程） ssh-add ~/.ssh/github_ed25519 # 把 SSH 私钥添加进 SSH agent，让系统记住它 测试 ssh-add -l # 检查本地 SSH key ssh -T git@github.com # 测试 SSH 连接 ","date":"2024-10-28T18:22:43+08:00","permalink":"https://foxusn.github.io/ssh-note/","title":"SSH 相关内容"},{"content":"Git 配置 git config --list # 查看当前仓库 git 配置 git config --global --list # 查看全局 git 配置 git config --get init.defaultBranch # 查看默认分支名 git config --global init.defaultBranch main # 修改默认分支为main git config --global user.name \u0026#34;your name\u0026#34; # 配置用户名 git config --global user.email \u0026#34;example@domain.com\u0026#34; # 配置邮箱 基础命令 git init # 初始化本地仓库 git add . git commit -m \u0026#34;first commit\u0026#34; git remote add origin git@github.com:username/repo.git git remote v # 查看本地记录的远程仓库地址 ssh -T git@github.com # 测试连接，注意输出的仓库名 git push -u origin main git pull origin main 远程仓库 git remote -v git remote add origin git@github.com:username/repo.git git remote set-url origin git@github.com:username/repo.git git remote remove origin ","date":"2024-10-23T01:37:07+08:00","permalink":"https://foxusn.github.io/git-note/","title":"Git 相关内容"}]