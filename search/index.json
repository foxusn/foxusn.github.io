[{"content":"Git 配置 git config --list # 查看当前仓库 git 配置 git config --global --list # 查看全局 git 配置 git config --get init.defaultBranch # 查看默认分支名 git config --global init.defaultBranch main # 修改默认分支为main git config --global user.name \u0026#34;your name\u0026#34; # 配置用户名 git config --global user.email \u0026#34;example@domain.com\u0026#34; # 配置邮箱 本地Push git init # 初始化本地仓库 git add . git commit -m \u0026#34;first commit\u0026#34; git remote add origin git@github.com:username/repo.git git remote v # 查看本地记录的远程仓库地址 ssh -T git@github.com # 测试连接，注意输出的仓库名 git push -u origin main git pull origin main ","date":"2025-07-23T01:37:07+08:00","permalink":"https://example.com/p/git-%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/","title":"Git 相关内容"},{"content":"安装 安装 Fcitx5 主程序和中文包：\nsudo dnf fcitx5 fcitx5-chinese-addons 开机启动 设置随系统启动，然后重启\ncp /usr/share/applications/org.fcitx.Fcitx5.desktop ~/.config/autostart/ 添加拼音输入法 打开 Fcitx 5 Configuration，搜索 ‘shuangpin’ 或其他拼音输入方案，点击 \u0026lsquo;Add\u0026rsquo; 添加\n安装 Gnome 扩展 安装 Gnome 扩展 Input Method Panel 以设置候选字的字体和大小 🔚\n","date":"2025-07-22T21:44:58+08:00","permalink":"https://example.com/p/fedora-linux-%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95/","title":"Fedora Linux 安装中文输入法"},{"content":"检查 openssh 是否已安装 dnf list installed openssh which ssh # 输出 /usr/sbin/ssh systemctl status sshd 生成 ed25519 密钥对 ssh-keygen -t ed25519 -C \u0026#34;your_email@example.com\u0026#34; -f ~/.ssh/github_ed25519 -N \u0026#34;\u0026#34; # ~/.ssh 如果不存在会自动创建；-N 参数设置 passphrase 为空 添加到 SSH agent eval \u0026#34;$(ssh-agent -s)\u0026#34; # 启动 SSH Agent（后台进程） ssh-add ~/.ssh/github_ed25519 # 把 SSH 私钥添加进 SSH agent，让系统记住它 测试 SSH 连接 ssh-add -l # 检查本地 SSH key ssh -T git@github.com # 测试 SSH 连接 ","date":"2025-05-10T18:22:43+08:00","permalink":"https://example.com/p/ssh-%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/","title":"SSH 相关内容"},{"content":"安装 Samba sudo dnf install samba samba-client samba-common 创建共享文件夹 mkdir -p ~/Shared chmod 777 ~/Shared # 赋权 配置共享文件夹 追加内容到 /etc/samba/smb.conf\nsudo bash -c \u0026#39;cat \u0026gt;\u0026gt; /etc/samba/smb.conf \u0026lt;\u0026lt;EOF [Shared] path = /home/YOUR_USERNAME/Shared writable = yes browseable = yes guest ok = no create mask = 0666 directory mask = 0777 force user = YOUR_USERNAME EOF\u0026#39; 添加 Samba 用户 需确保这个用户在系统中存在\nsudo smbpasswd -a YOUR_USERNAME 配置防火墙 配置防火墙放行 Samba 服务\nsudo firewall-cmd --permanent --add-service=samba sudo firewall-cmd --reload sudo firewall-cmd --list-all 配置 SELinux 配置 SELinux 支持 Samba 访问 home 目录\nsudo setsebool -P samba_enable_home_dirs on sudo chcon -t samba_share_t ~/Shared -R 配置开机启动 立即启动、开机自启动\nsudo systemctl enable --now smb nmb sudo systemctl status smb nmb 连接 smb://192.168.XXX.XXX/Shared ","date":"2025-04-17T02:47:51+08:00","permalink":"https://example.com/p/fedora-42-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-samba/","title":"Fedora 42 安装、配置 Samba"},{"content":"之前一直用 Hexo 发博客，生成速度确实感人，最近研究了一下常见的几个静态网站生成器，最终选择了 Hugo，以下是 Hugo 博客搭建和通过 GitHub Pages + GitHub Actions （使用 Deploy key 而不是 PAT）实现自动部署的具体步骤\n前置条件 🔧 Git，GitHub 账户，VS Code\n本地部署 这里在 Fedora Linux 上做本地部署，其他操作系统上的步骤大同小异\n▶️ 首先使用内置的包管理器搜索 hugo 查看是否是最新版本（dnf 是 Fedora 内置的包管理器），是则通过dnf install hugo命令安装，否则到 GitHub 下载最新版本 hugo\ndnf info hugo # 或者：dnf repoquery hugo dnf 搜索的版本对比 GitHub 上的版本，GitHub 的版本更新，所以我在 GitHub 下载，又因为后面会通过 GitHub Pages 部署，所以选择文件名不带 “withdeploy” 的版本，通过命令解压：\ntar -xzvf hugo_extended_x.xxx.x_linux-amd64.tar.gz 解压后把 hugo 这个文件移动到 /usr/local/bin 目录：\nsudo mv hugo /usr/local/bin 查看 Hugo 版本：\nhugo version 创建、进入博客文件夹：\nhugo new site hugo-blog # 自己起一个文件夹名 cd hugo-blog 初始化仓库：\ngit init 通过 touch .gitignore 命令新建 .gitignore 文件，复制下面的内容添加进去（用来忽略不必要的文件和文件夹）：\n/public resources/_gen/ .hugo_build.lock # Compiled Object files, Static and Dynamic libs (Shared Objects) *.o *.a *.so # Folders _obj _test # Architecture specific extensions/prefixes *.[568vq] [568vq].out *.cgo1.go *.cgo2.c _cgo_defun.c _cgo_gotypes.go _cgo_export.* _testmain.go *.exe *.test .DS_Store 在 Hugo Themes 找自己喜欢的主题，以 PaperMod 为例，它支持多种安装方式，这里通过 submodule 的方式安装：\ngit submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod # needed when you reclone your repo (submodules may not get cloned automatically) git submodule update --init --recursive # update git submodule update --remote --merge 应用主题：\necho \u0026#34;theme = \u0026#39;PaperMod\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml 新建一篇文章：\nhugo new content ./content/posts/my-first-post.md 启动本地服务器（新建的文章默认是草稿，-D参数表示构建草稿内容）：\nhugo server -D 部署到 GitHub Pages 📦 创建一个 Public 仓库，仓库名为 \u0026lt;username\u0026gt;.github.io，创建的时候添加一个 README.md 文件（也可以创建好之后添加，总之不是空仓库就行，否则会影响后面的工作流），然后把本地博客目录的 hugo.toml 这个配置文件的 baseURL 这行后面的链接改为 https://username.github.io/（注意替换 username）\n📦 再创建一个 Private 仓库，用来保存博客源码，不需要添加任何文件，名字自己起\n🔑 生成一个 ed25519 类型的 SHH 密钥对，用于连接远程仓库：\nssh-keygen -t ed25519 -C \u0026#34;your_email@example.com\u0026#34; -f ~/.ssh/github_ed25519 -N \u0026#34;\u0026#34; # ~/.ssh 如果不存在会自动创建；-N 参数设置 passphrase 为空 把 SSH 私钥添加进 SSH agent：\neval \u0026#34;$(ssh-agent -s)\u0026#34; ssh-add ~/.ssh/github_ed25519 ➡️ 复制 .pub 的内容，来到 GitHub，点击头像，点 Settings \u0026gt; SSH and GPG Keys \u0026gt; New SSH key，填写 Title，Key type 保持默认 Authenticaiton Key，粘贴到 Key 的区域，点击Add SSH key\n然后在博客根目录下测试连接：\nssh-add -l # 检查本地 SSH key ssh -T git@github.com # 测试 SSH 连接 🔑 同样在 ~/.ssh 再生成一个 ed25519 密钥对：\nssh-keygen -t ed25519 -C \u0026#34;hugo-deploy-key\u0026#34; -f ~/.ssh/hugo_deploy_key -N \u0026#34;\u0026#34; 第二个生成之后不需要把私钥添加进 SSH agent\n➡️ 复制 .pub 的内容，到刚创建的 Public 仓库，点击 Settings \u0026gt; Deploy keys \u0026gt; Add deploy key，粘贴到 “Key” 下面的输入框，起一个 Title，比如：hugo-deploy-key，勾选“Allow write access”，最后点击“Add key”\n➡️ 复制私钥的内容（没有扩展名的文件），到到 Private 仓库的 Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret，粘贴到 Secret 下面的输入框，起一个 Name，比如：HUGO_DEPLOY_SECRET，最后点击 Add secret\n⚠️ 私钥要复制包括头尾两行的全部内容，粘贴的时候**后面多加一个空行**\n创建 GitHub Actions 工作流文件：\nmkdir -p .github/workflows touch .github/workflows/hugo.yaml 编辑 hugo.yaml，把下面内容粘贴进去（注意替换自己的信息）：\nname: Deploy to Public Repo on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: # Set timezone - name: Set timezone run: | sudo timedatectl set-timezone Asia/Shanghai # Checkout - name: Checkout private repo uses: actions/checkout@v4 with: submodules: recursive # fetch-depth: 0 # SSH - name: Setup SSH uses: webfactory/ssh-agent@v0.9.1 with: ssh-private-key: ${{ secrets.HUGO_DEPLOY_KEY }} # Set up Hugo - name: Set up Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;0.145.0\u0026#34; # 填你的hugo版本 # Build - name: Build Hugo site run: hugo # Deploy to the public repo via SSH - name: Deploy to public repository run: | rm -rf deploy-repo git clone --single-branch --branch main git@github.com:\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io.git deploy-repo cd deploy-repo rm -rf * cp -r ../public/* . git config user.email \u0026#34;example@gmail.com\u0026#34; git config user.name \u0026#34;username\u0026#34; git add . git commit -m \u0026#34;Auto deploy Hugo site $(date \u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39;)\u0026#34; git push origin main 配置用户名和邮箱：\n# 注意替换自己的信息 git config user.email “example@gmail.com” git config user.name \u0026#34;username\u0026#34; # 默认使用main分支 git config --global init.defaultBranch main 关联 Private 仓库：\n# 查看配置 git remote add origin git@github.com:username/hugo-source-code.git Add, Commit, Push 三步走：\ngit add . git commit -m \u0026#34;First commit\u0026#34; git push -u origin main 最后到 Private 仓库的 Actions 界面看工作流是否 run 成功，成功之后在浏览器打开 username.github.io 即可查看博客页面 🔚\n参考 Hugo， PaperMod\n","date":"2025-04-06T22:04:04+08:00","permalink":"https://example.com/p/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%92%8C%E9%83%A8%E7%BD%B2/","title":"Hugo 博客搭建和部署"}]